export async function generateResponse(
  userInput: string,
  step: Step,
  previousMessages: string
): Promise<{ content: string; shouldAdvance: boolean }> {
  // Fetch the system prompt from database
  const systemPrompt = await storage.getSystemPromptByActivity(step.activityId);

  if (!systemPrompt) {
    throw new Error(`No system prompt found for activity ${step.activityId}`);
  }

  // Create a more detailed prompt for better evaluation
  let prompt = systemPrompt.systemPrompt
    .replace("${step.objective}", step.objective)
    .replace("${step.spanishWords}", step.spanishWords)
    .replace("${step.expectedResponses}", step.expectedResponses)
    .replace("${step.suggestedScript}", step.suggestedScript)
    .replace("${step.successResponse}", step.successResponse)
    .replace("${previousMessages}", previousMessages);

  // Add more specific evaluation instructions
  prompt += "\n\nIMPORTANT: You are an educational assistant evaluating a child's response. " +
    "You must respond with a JSON object using this format:\n" +
    '{\n' +
    '  "response": "Your encouraging message to the child",\n' +
    '  "shouldAdvance": true/false,\n' +
    '  "evaluation": "Brief reason for your decision"\n' +
    '}\n\n' +
    'Guidelines for evaluation:\n' +
    '1. Focus on meaning over exact wording\n' +
    '2. Consider age-appropriate variations\n' +
    '3. Accept contextually appropriate responses\n' +
    '4. Be encouraging even when not advancing\n' +
    `Expected response patterns: ${step.expectedResponses}\n` +
    'Current context: This is a language learning activity. Be generous with interpretations while ensuring learning objectives are met.';

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: prompt },
        { role: "user", content: userInput }
      ],
      temperature: 0.7,
      max_tokens: 250,
      response_format: { type: "json_object" }
    });

    const responseContent = response.choices[0].message.content || "{}";

    try {
      const parsedResponse = JSON.parse(responseContent);

      // Extract response data with evaluation logging
      const content = parsedResponse.response || "I'm not sure how to respond to that.";
      const shouldAdvance = !!parsedResponse.shouldAdvance;
      const evaluation = parsedResponse.evaluation || "";

      console.log(`LLM evaluation: ${evaluation}`);
      console.log(`Step should advance: ${shouldAdvance}`);

      return { content, shouldAdvance };
    } catch (parseError) {
      console.error("Error parsing JSON response:", parseError);
      console.error("Raw response:", responseContent);
      return { 
        content: "I'm having trouble understanding. Can you try again?", 
        shouldAdvance: false 
      };
    }
  } catch (error) {
    console.error("OpenAI API error:", error);
    throw new Error("Failed to generate response");
  }
}