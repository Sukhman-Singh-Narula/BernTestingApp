export const patronusEvaluationMiddleware = (req: Request, res: Response, next: NextFunction) => {
  // Continue with the request immediately
  next();

  // Process Patronus evaluation in the background
  (async () => {
    try {
      const debugId = ++debugCounter;
      // Get the original path from req.originalUrl if available, otherwise use req.path
      const fullPath = req.originalUrl || req.path;
      console.log(`[Patronus Middleware #${debugId}] Processing ${req.method} ${fullPath}`);

      // Extract conversation ID directly from path parts
      const parts = fullPath.split('/');
      const conversationIndex = parts.findIndex(part => part === 'conversation');
      
      if (conversationIndex === -1 || conversationIndex >= parts.length - 1) {
        console.log(`[Patronus Middleware #${debugId}] Skipping: Not a conversation request`);
        return;
      }
      
      const conversationIdStr = parts[conversationIndex + 1];
      const conversationId = parseInt(conversationIdStr);
      
      if (isNaN(conversationId) || conversationId <= 0) {
        console.log(`[Patronus Middleware #${debugId}] Skipping: Invalid conversation ID: ${conversationIdStr}`);
        return;
      }

      // Skip evaluation for conversation creation
      if (req.method === 'POST' && fullPath.endsWith('/conversation')) {
        console.log(`[Patronus Middleware #${debugId}] Skipping: Conversation creation`);
        return;
      }

      // Skip for GET requests
      if (req.method === 'GET') {
        console.log(`[Patronus Middleware #${debugId}] Skipping: GET request`);
        return;
      }

      console.log(`[Patronus Middleware #${debugId}] Processing message for conversation ${conversationId}`);

      // Get messages for evaluation
      const allMessages = await storage.getMessagesByConversation(conversationId);
      const aiMessages = allMessages.filter(msg => msg.role === 'assistant');
      console.log(`[Patronus Middleware #${debugId}] Found ${aiMessages.length} AI messages for conversation ${conversationId}`);

      // Only evaluate after we have enough messages
      if (aiMessages.length < 2) {
        console.log(`[Patronus Middleware #${debugId}] Skipping: Not enough AI messages (${aiMessages.length})`);
        return;
      }

      // Get conversation and step data
      const conversation = await storage.getConversation(conversationId);
      if (!conversation) {
        console.log(`[Patronus Middleware #${debugId}] Skipping: Conversation ${conversationId} not found`);
        return;
      }

      const stepData = await storage.getStepByActivityAndNumber(
        conversation.activityId,
        conversation.currentStep - 1
      );

      if (!stepData) {
        console.log(`[Patronus Middleware #${debugId}] Skipping: Step data not found for conversation ${conversationId}`);
        return;
      }

      // Get the relevant messages for evaluation
      const userMessages = allMessages.filter(msg => msg.role === 'user');
      const userMessage = userMessages.length > 0 ? userMessages[userMessages.length - 1] : null;
      const currentAiMessage = aiMessages.length > 0 ? aiMessages[aiMessages.length - 1] : null;
      const previousAiMessage = aiMessages.length > 1 ? aiMessages[aiMessages.length - 2] : { content: '' };

      if (!userMessage || !currentAiMessage) {
        console.log(`[Patronus Middleware #${debugId}] Skipping: Missing required messages`);
        return;
      }

      console.log(`[Patronus Middleware #${debugId}] Evaluating conversation ${conversationId} with Patronus`);
      console.log(`[Patronus Middleware #${debugId}] User message: "${userMessage.content?.substring(0, 20)}..."`);
      console.log(`[Patronus Middleware #${debugId}] AI message: "${currentAiMessage.content?.substring(0, 20)}..."`);

      // Fire-and-forget evaluation
      try {
        const result = await patronus.evaluateMessage(
          userMessage.content,
          currentAiMessage.content,
          previousAiMessage.content,
          {
            ...stepData,
            llm_advancement_decision: JSON.parse(currentAiMessage.metadata || '{}').shouldAdvance
          }
        );
        console.log(`[Patronus Middleware #${debugId}] Patronus evaluation completed successfully for conversation ${conversationId}`);
      } catch (error) {
        console.error(`[Patronus Middleware #${debugId}] Patronus evaluation error:`, error);
      }

    } catch (error) {
      console.error('Error in background Patronus evaluation:', error);
    }
  })();
};